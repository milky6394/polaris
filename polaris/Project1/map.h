#include "DxLib.h"

class MapControler {
public:
    int mapnumber;
    int retu, gyou;
    bool eofFlag;


    int map[5][2][9][9] = { {
    {
    {10,10,10,19,12,13,10,10,10},
    {10,10,10,18,11,14,10,10,10},
    {10,10,10,18,11,14,10,10,10},
    {10,10,10,18,11,14,10,10,10},
    {10,10,10,18,11,14,10,10,10},
    {10,10,10,18,11,14,10,10,10},
    {10,10,10,18,11,14,10,10,10},
    {10,10,10,18,11,14,10,10,10},
    {10,10,10,17,16,15,10,10,10}
    },{
    {0,0,0,2,2,2,0,0,0},
    {0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0}
    }
    },{
    {
    {10,20,10,10,20,10,10,20,10},
    {19,11,12,12,11,12,12,11,13},
    {18,11,11,11,11,11,11,11,14},
    {18,11,11,11,11,11,11,11,14},
    {17,16,16,11,11,11,16,16,15},
    {10,10,10,18,11,14,10,10,10},
    {10,10,10,18,11,14,10,10,10},
    {10,10,10,18,11,14,10,10,10},
    {10,10,10,17,16,15,10,10,10}
    },{
    {0,1001,0,0,1002,0,0,1003,0},
    {0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0},
    {0,0,0,1,1,1,0,0,0}
    }
    },{
    {
    {19,12,12,12,12,12,12,12,13},
    {18,11,11,11,11,11,11,11,14},
    {18,11,11,11,11,11,11,11,14},
    {18,11,11,11,11,11,11,11,14},
    {18,11,11,11,11,11,11,11,14},
    {18,11,11,11,11,11,11,11,14},
    {18,11,11,11,11,11,11,11,14},
    {18,11,11,11,11,11,11,11,14},
    {17,16,16,16,16,16,16,16,15}
    },{
    {0,0,0,0,0,0,0,0,2},
    {0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0}
    }
    },{
    {
    {19,12,12,12,12,12,12,12,13},
    {18,11,11,11,11,11,11,11,14},
    {18,11,11,11,11,11,11,11,14},
    {18,11,11,11,11,11,11,11,14},
    {18,11,11,11,11,11,11,11,14},
    {18,11,11,11,11,11,11,11,14},
    {18,11,11,11,11,11,11,11,14},
    {18,11,11,11,11,11,11,11,14},
    {17,16,16,16,16,16,16,16,15}
    },{
    {0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,2}
    }
    },{
    {
    {19,12,12,12,12,12,12,12,13},
    {18,11,11,11,11,11,11,11,14},
    {18,11,11,11,11,11,11,11,14},
    {18,11,11,11,11,11,11,11,14},
    {18,11,11,11,11,11,11,11,14},
    {18,11,11,11,11,11,11,11,14},
    {18,11,11,11,11,11,11,11,14},
    {18,11,11,11,11,11,11,11,14},
    {17,16,16,16,16,16,16,16,15}
    },{
    {0,0,0,0,0,0,0,0,101},
    {0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0},
    {2,0,0,0,0,0,0,0,0}
    }
    } };
    /*
    mapを格納する配列
    1層目：playerが動ける範囲指定
    2層目：そのマスでの特殊操作
    特殊操作
    1桁：そのIDのmapへ飛ぶ
    3桁：100で割った余りのアイテムを取得
    4桁：1000で割った余りの選択肢を表示
    5桁：10000で割った余りの会話イベントを開始
    */

    MapControler() {
        mapnumber = 0;
        FILE* fp = nullptr;//ファイルのポインタを宣言
        fopen_s(&fp, "testmap.csv", "r");//fpを読み取り形式で開く
        if (fp == NULL)DebugBreak();
        retu = 0;
        gyou = 0;
        int c;//文字を格納する変数
        char buf[10];//文字列を格納する
        memset(buf, 0, sizeof(buf));
        eofFlag = false;
        while (1) {
            while (1) {
                if (fp != nullptr) {
                    c = fgetc(fp);//文字読んでcに格納
                }
                if (c == EOF) {
                    eofFlag = true;//EndOfFileの時にループを抜ける
                    break;
                }
                if (c != ',' && c != '\n') {
                    //strcat(buf, (const char*)&c);//cがセルの区切りか改行でなければ、bufに連結する
                    //strcat_s(buf, sizeof(buf), (const char*)&c);
                    char onechar[2] = { (char)c, '\0' }; // 1文字＋終端で文字列を作る
                    strcat_s(buf, sizeof(buf), onechar); // 安全に連結
                }
                else {
                    int num = (int)strtol(buf, nullptr, 10);//bufをint型に直して、即席のローカル変数numに代入atoi(buf); 
                    map[0][0][retu][gyou] = num;//num番目のチップ画像のハンドルを取得
                    memset(buf, 0, sizeof(buf));//bufをリセット
                    break;//区切りか改行ならループを抜ける
                }
            }
            //1セル分のループを抜けたら
            if (eofFlag)break;
            if (c == ',')retu++;
            if (c == '\n') {//改行だったら行を増やす
                gyou++;
                retu = 0;
            }
        }
        if (fp != nullptr) {
            fclose(fp);
        }
    }

    int Mappixel_X(int x) {
        return 440 + (x * 50);
    }
    int Mappixel_Y(int y) {
        return 110 + (y * 50);
    }
    //引数に与えた配列の座標を画面内座標に変換する関数

    void MapPracer() {
        for (int i = 0; i < 9; i++) {
            for (int j = 0; j < 9; j++) {
                if (map[mapnumber][0][j][i] != 10) {
                    DrawCircle(Mappixel_X(i), Mappixel_Y(j), 10, GetColor(255, 255, 255), TRUE);
                }
            }
        }
    }
    //mapを描画する関数
};
